// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `telemetry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry {
    // message fields
    pub ts: u64,
    pub load_avg: ::protobuf::SingularPtrField<Telemetry_LoadAvg>,
    pub cpu: ::protobuf::SingularPtrField<Telemetry_Cpu>,
    pub memory: ::protobuf::SingularPtrField<Telemetry_Memory>,
    pub swap: ::protobuf::SingularPtrField<Telemetry_Swap>,
    pub disk: ::protobuf::RepeatedField<Telemetry_Disk>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry {
    fn default() -> &'a Telemetry {
        <Telemetry as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry {
    pub fn new() -> Telemetry {
        ::std::default::Default::default()
    }

    // uint64 ts = 1;


    pub fn get_ts(&self) -> u64 {
        self.ts
    }
    pub fn clear_ts(&mut self) {
        self.ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_ts(&mut self, v: u64) {
        self.ts = v;
    }

    // .Telemetry.LoadAvg load_avg = 2;


    pub fn get_load_avg(&self) -> &Telemetry_LoadAvg {
        self.load_avg.as_ref().unwrap_or_else(|| <Telemetry_LoadAvg as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_avg(&mut self) {
        self.load_avg.clear();
    }

    pub fn has_load_avg(&self) -> bool {
        self.load_avg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_avg(&mut self, v: Telemetry_LoadAvg) {
        self.load_avg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_avg(&mut self) -> &mut Telemetry_LoadAvg {
        if self.load_avg.is_none() {
            self.load_avg.set_default();
        }
        self.load_avg.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_avg(&mut self) -> Telemetry_LoadAvg {
        self.load_avg.take().unwrap_or_else(|| Telemetry_LoadAvg::new())
    }

    // .Telemetry.Cpu cpu = 3;


    pub fn get_cpu(&self) -> &Telemetry_Cpu {
        self.cpu.as_ref().unwrap_or_else(|| <Telemetry_Cpu as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: Telemetry_Cpu) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut Telemetry_Cpu {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> Telemetry_Cpu {
        self.cpu.take().unwrap_or_else(|| Telemetry_Cpu::new())
    }

    // .Telemetry.Memory memory = 4;


    pub fn get_memory(&self) -> &Telemetry_Memory {
        self.memory.as_ref().unwrap_or_else(|| <Telemetry_Memory as ::protobuf::Message>::default_instance())
    }
    pub fn clear_memory(&mut self) {
        self.memory.clear();
    }

    pub fn has_memory(&self) -> bool {
        self.memory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: Telemetry_Memory) {
        self.memory = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory(&mut self) -> &mut Telemetry_Memory {
        if self.memory.is_none() {
            self.memory.set_default();
        }
        self.memory.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory(&mut self) -> Telemetry_Memory {
        self.memory.take().unwrap_or_else(|| Telemetry_Memory::new())
    }

    // .Telemetry.Swap swap = 5;


    pub fn get_swap(&self) -> &Telemetry_Swap {
        self.swap.as_ref().unwrap_or_else(|| <Telemetry_Swap as ::protobuf::Message>::default_instance())
    }
    pub fn clear_swap(&mut self) {
        self.swap.clear();
    }

    pub fn has_swap(&self) -> bool {
        self.swap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_swap(&mut self, v: Telemetry_Swap) {
        self.swap = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_swap(&mut self) -> &mut Telemetry_Swap {
        if self.swap.is_none() {
            self.swap.set_default();
        }
        self.swap.as_mut().unwrap()
    }

    // Take field
    pub fn take_swap(&mut self) -> Telemetry_Swap {
        self.swap.take().unwrap_or_else(|| Telemetry_Swap::new())
    }

    // repeated .Telemetry.Disk disk = 6;


    pub fn get_disk(&self) -> &[Telemetry_Disk] {
        &self.disk
    }
    pub fn clear_disk(&mut self) {
        self.disk.clear();
    }

    // Param is passed by value, moved
    pub fn set_disk(&mut self, v: ::protobuf::RepeatedField<Telemetry_Disk>) {
        self.disk = v;
    }

    // Mutable pointer to the field.
    pub fn mut_disk(&mut self) -> &mut ::protobuf::RepeatedField<Telemetry_Disk> {
        &mut self.disk
    }

    // Take field
    pub fn take_disk(&mut self) -> ::protobuf::RepeatedField<Telemetry_Disk> {
        ::std::mem::replace(&mut self.disk, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Telemetry {
    fn is_initialized(&self) -> bool {
        for v in &self.load_avg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.memory {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.swap {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.disk {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ts = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_avg)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.memory)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.swap)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.disk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ts != 0 {
            my_size += ::protobuf::rt::value_size(1, self.ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.load_avg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.memory.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.swap.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.disk {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ts != 0 {
            os.write_uint64(1, self.ts)?;
        }
        if let Some(ref v) = self.load_avg.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.memory.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.swap.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.disk {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry {
        Telemetry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ts",
                |m: &Telemetry| { &m.ts },
                |m: &mut Telemetry| { &mut m.ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry_LoadAvg>>(
                "load_avg",
                |m: &Telemetry| { &m.load_avg },
                |m: &mut Telemetry| { &mut m.load_avg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry_Cpu>>(
                "cpu",
                |m: &Telemetry| { &m.cpu },
                |m: &mut Telemetry| { &mut m.cpu },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry_Memory>>(
                "memory",
                |m: &Telemetry| { &m.memory },
                |m: &mut Telemetry| { &mut m.memory },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry_Swap>>(
                "swap",
                |m: &Telemetry| { &m.swap },
                |m: &mut Telemetry| { &mut m.swap },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry_Disk>>(
                "disk",
                |m: &Telemetry| { &m.disk },
                |m: &mut Telemetry| { &mut m.disk },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry>(
                "Telemetry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry {
        static instance: ::protobuf::rt::LazyV2<Telemetry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry::new)
    }
}

impl ::protobuf::Clear for Telemetry {
    fn clear(&mut self) {
        self.ts = 0;
        self.load_avg.clear();
        self.cpu.clear();
        self.memory.clear();
        self.swap.clear();
        self.disk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry_LoadAvg {
    // message fields
    pub one: f64,
    pub five: f64,
    pub fifteen: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry_LoadAvg {
    fn default() -> &'a Telemetry_LoadAvg {
        <Telemetry_LoadAvg as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry_LoadAvg {
    pub fn new() -> Telemetry_LoadAvg {
        ::std::default::Default::default()
    }

    // double one = 1;


    pub fn get_one(&self) -> f64 {
        self.one
    }
    pub fn clear_one(&mut self) {
        self.one = 0.;
    }

    // Param is passed by value, moved
    pub fn set_one(&mut self, v: f64) {
        self.one = v;
    }

    // double five = 2;


    pub fn get_five(&self) -> f64 {
        self.five
    }
    pub fn clear_five(&mut self) {
        self.five = 0.;
    }

    // Param is passed by value, moved
    pub fn set_five(&mut self, v: f64) {
        self.five = v;
    }

    // double fifteen = 3;


    pub fn get_fifteen(&self) -> f64 {
        self.fifteen
    }
    pub fn clear_fifteen(&mut self) {
        self.fifteen = 0.;
    }

    // Param is passed by value, moved
    pub fn set_fifteen(&mut self, v: f64) {
        self.fifteen = v;
    }
}

impl ::protobuf::Message for Telemetry_LoadAvg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.one = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.five = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.fifteen = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.one != 0. {
            my_size += 9;
        }
        if self.five != 0. {
            my_size += 9;
        }
        if self.fifteen != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.one != 0. {
            os.write_double(1, self.one)?;
        }
        if self.five != 0. {
            os.write_double(2, self.five)?;
        }
        if self.fifteen != 0. {
            os.write_double(3, self.fifteen)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry_LoadAvg {
        Telemetry_LoadAvg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "one",
                |m: &Telemetry_LoadAvg| { &m.one },
                |m: &mut Telemetry_LoadAvg| { &mut m.one },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "five",
                |m: &Telemetry_LoadAvg| { &m.five },
                |m: &mut Telemetry_LoadAvg| { &mut m.five },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "fifteen",
                |m: &Telemetry_LoadAvg| { &m.fifteen },
                |m: &mut Telemetry_LoadAvg| { &mut m.fifteen },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry_LoadAvg>(
                "Telemetry.LoadAvg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry_LoadAvg {
        static instance: ::protobuf::rt::LazyV2<Telemetry_LoadAvg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry_LoadAvg::new)
    }
}

impl ::protobuf::Clear for Telemetry_LoadAvg {
    fn clear(&mut self) {
        self.one = 0.;
        self.five = 0.;
        self.fifteen = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry_LoadAvg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry_LoadAvg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry_Cpu {
    // message fields
    pub usage: f32,
    pub temperature: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry_Cpu {
    fn default() -> &'a Telemetry_Cpu {
        <Telemetry_Cpu as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry_Cpu {
    pub fn new() -> Telemetry_Cpu {
        ::std::default::Default::default()
    }

    // float usage = 1;


    pub fn get_usage(&self) -> f32 {
        self.usage
    }
    pub fn clear_usage(&mut self) {
        self.usage = 0.;
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: f32) {
        self.usage = v;
    }

    // float temperature = 2;


    pub fn get_temperature(&self) -> f32 {
        self.temperature
    }
    pub fn clear_temperature(&mut self) {
        self.temperature = 0.;
    }

    // Param is passed by value, moved
    pub fn set_temperature(&mut self, v: f32) {
        self.temperature = v;
    }
}

impl ::protobuf::Message for Telemetry_Cpu {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.usage = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.temperature = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.usage != 0. {
            my_size += 5;
        }
        if self.temperature != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.usage != 0. {
            os.write_float(1, self.usage)?;
        }
        if self.temperature != 0. {
            os.write_float(2, self.temperature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry_Cpu {
        Telemetry_Cpu::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "usage",
                |m: &Telemetry_Cpu| { &m.usage },
                |m: &mut Telemetry_Cpu| { &mut m.usage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "temperature",
                |m: &Telemetry_Cpu| { &m.temperature },
                |m: &mut Telemetry_Cpu| { &mut m.temperature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry_Cpu>(
                "Telemetry.Cpu",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry_Cpu {
        static instance: ::protobuf::rt::LazyV2<Telemetry_Cpu> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry_Cpu::new)
    }
}

impl ::protobuf::Clear for Telemetry_Cpu {
    fn clear(&mut self) {
        self.usage = 0.;
        self.temperature = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry_Cpu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry_Cpu {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry_Memory {
    // message fields
    pub memory_total: u64,
    pub memory_used: u64,
    pub memory_used_percent: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry_Memory {
    fn default() -> &'a Telemetry_Memory {
        <Telemetry_Memory as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry_Memory {
    pub fn new() -> Telemetry_Memory {
        ::std::default::Default::default()
    }

    // uint64 memory_total = 1;


    pub fn get_memory_total(&self) -> u64 {
        self.memory_total
    }
    pub fn clear_memory_total(&mut self) {
        self.memory_total = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_total(&mut self, v: u64) {
        self.memory_total = v;
    }

    // uint64 memory_used = 2;


    pub fn get_memory_used(&self) -> u64 {
        self.memory_used
    }
    pub fn clear_memory_used(&mut self) {
        self.memory_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_used(&mut self, v: u64) {
        self.memory_used = v;
    }

    // float memory_used_percent = 3;


    pub fn get_memory_used_percent(&self) -> f32 {
        self.memory_used_percent
    }
    pub fn clear_memory_used_percent(&mut self) {
        self.memory_used_percent = 0.;
    }

    // Param is passed by value, moved
    pub fn set_memory_used_percent(&mut self, v: f32) {
        self.memory_used_percent = v;
    }
}

impl ::protobuf::Message for Telemetry_Memory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory_total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory_used = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.memory_used_percent = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.memory_total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.memory_total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_used != 0 {
            my_size += ::protobuf::rt::value_size(2, self.memory_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_used_percent != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.memory_total != 0 {
            os.write_uint64(1, self.memory_total)?;
        }
        if self.memory_used != 0 {
            os.write_uint64(2, self.memory_used)?;
        }
        if self.memory_used_percent != 0. {
            os.write_float(3, self.memory_used_percent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry_Memory {
        Telemetry_Memory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "memory_total",
                |m: &Telemetry_Memory| { &m.memory_total },
                |m: &mut Telemetry_Memory| { &mut m.memory_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "memory_used",
                |m: &Telemetry_Memory| { &m.memory_used },
                |m: &mut Telemetry_Memory| { &mut m.memory_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "memory_used_percent",
                |m: &Telemetry_Memory| { &m.memory_used_percent },
                |m: &mut Telemetry_Memory| { &mut m.memory_used_percent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry_Memory>(
                "Telemetry.Memory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry_Memory {
        static instance: ::protobuf::rt::LazyV2<Telemetry_Memory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry_Memory::new)
    }
}

impl ::protobuf::Clear for Telemetry_Memory {
    fn clear(&mut self) {
        self.memory_total = 0;
        self.memory_used = 0;
        self.memory_used_percent = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry_Memory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry_Memory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry_Swap {
    // message fields
    pub swap_total: u64,
    pub swap_used: u64,
    pub swap_used_percent: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry_Swap {
    fn default() -> &'a Telemetry_Swap {
        <Telemetry_Swap as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry_Swap {
    pub fn new() -> Telemetry_Swap {
        ::std::default::Default::default()
    }

    // uint64 swap_total = 1;


    pub fn get_swap_total(&self) -> u64 {
        self.swap_total
    }
    pub fn clear_swap_total(&mut self) {
        self.swap_total = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_total(&mut self, v: u64) {
        self.swap_total = v;
    }

    // uint64 swap_used = 2;


    pub fn get_swap_used(&self) -> u64 {
        self.swap_used
    }
    pub fn clear_swap_used(&mut self) {
        self.swap_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_swap_used(&mut self, v: u64) {
        self.swap_used = v;
    }

    // float swap_used_percent = 3;


    pub fn get_swap_used_percent(&self) -> f32 {
        self.swap_used_percent
    }
    pub fn clear_swap_used_percent(&mut self) {
        self.swap_used_percent = 0.;
    }

    // Param is passed by value, moved
    pub fn set_swap_used_percent(&mut self, v: f32) {
        self.swap_used_percent = v;
    }
}

impl ::protobuf::Message for Telemetry_Swap {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.swap_total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.swap_used = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.swap_used_percent = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.swap_total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.swap_total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_used != 0 {
            my_size += ::protobuf::rt::value_size(2, self.swap_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.swap_used_percent != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.swap_total != 0 {
            os.write_uint64(1, self.swap_total)?;
        }
        if self.swap_used != 0 {
            os.write_uint64(2, self.swap_used)?;
        }
        if self.swap_used_percent != 0. {
            os.write_float(3, self.swap_used_percent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry_Swap {
        Telemetry_Swap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "swap_total",
                |m: &Telemetry_Swap| { &m.swap_total },
                |m: &mut Telemetry_Swap| { &mut m.swap_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "swap_used",
                |m: &Telemetry_Swap| { &m.swap_used },
                |m: &mut Telemetry_Swap| { &mut m.swap_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "swap_used_percent",
                |m: &Telemetry_Swap| { &m.swap_used_percent },
                |m: &mut Telemetry_Swap| { &mut m.swap_used_percent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry_Swap>(
                "Telemetry.Swap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry_Swap {
        static instance: ::protobuf::rt::LazyV2<Telemetry_Swap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry_Swap::new)
    }
}

impl ::protobuf::Clear for Telemetry_Swap {
    fn clear(&mut self) {
        self.swap_total = 0;
        self.swap_used = 0;
        self.swap_used_percent = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry_Swap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry_Swap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry_Disk {
    // message fields
    pub mount_point: ::std::string::String,
    pub space_total: u64,
    pub space_used: u64,
    pub space_used_percent: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry_Disk {
    fn default() -> &'a Telemetry_Disk {
        <Telemetry_Disk as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry_Disk {
    pub fn new() -> Telemetry_Disk {
        ::std::default::Default::default()
    }

    // string mount_point = 1;


    pub fn get_mount_point(&self) -> &str {
        &self.mount_point
    }
    pub fn clear_mount_point(&mut self) {
        self.mount_point.clear();
    }

    // Param is passed by value, moved
    pub fn set_mount_point(&mut self, v: ::std::string::String) {
        self.mount_point = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mount_point(&mut self) -> &mut ::std::string::String {
        &mut self.mount_point
    }

    // Take field
    pub fn take_mount_point(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mount_point, ::std::string::String::new())
    }

    // uint64 space_total = 2;


    pub fn get_space_total(&self) -> u64 {
        self.space_total
    }
    pub fn clear_space_total(&mut self) {
        self.space_total = 0;
    }

    // Param is passed by value, moved
    pub fn set_space_total(&mut self, v: u64) {
        self.space_total = v;
    }

    // uint64 space_used = 3;


    pub fn get_space_used(&self) -> u64 {
        self.space_used
    }
    pub fn clear_space_used(&mut self) {
        self.space_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_space_used(&mut self, v: u64) {
        self.space_used = v;
    }

    // float space_used_percent = 4;


    pub fn get_space_used_percent(&self) -> f32 {
        self.space_used_percent
    }
    pub fn clear_space_used_percent(&mut self) {
        self.space_used_percent = 0.;
    }

    // Param is passed by value, moved
    pub fn set_space_used_percent(&mut self, v: f32) {
        self.space_used_percent = v;
    }
}

impl ::protobuf::Message for Telemetry_Disk {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mount_point)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.space_total = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.space_used = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.space_used_percent = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.mount_point.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mount_point);
        }
        if self.space_total != 0 {
            my_size += ::protobuf::rt::value_size(2, self.space_total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.space_used != 0 {
            my_size += ::protobuf::rt::value_size(3, self.space_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.space_used_percent != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.mount_point.is_empty() {
            os.write_string(1, &self.mount_point)?;
        }
        if self.space_total != 0 {
            os.write_uint64(2, self.space_total)?;
        }
        if self.space_used != 0 {
            os.write_uint64(3, self.space_used)?;
        }
        if self.space_used_percent != 0. {
            os.write_float(4, self.space_used_percent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry_Disk {
        Telemetry_Disk::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mount_point",
                |m: &Telemetry_Disk| { &m.mount_point },
                |m: &mut Telemetry_Disk| { &mut m.mount_point },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "space_total",
                |m: &Telemetry_Disk| { &m.space_total },
                |m: &mut Telemetry_Disk| { &mut m.space_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "space_used",
                |m: &Telemetry_Disk| { &m.space_used },
                |m: &mut Telemetry_Disk| { &mut m.space_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "space_used_percent",
                |m: &Telemetry_Disk| { &m.space_used_percent },
                |m: &mut Telemetry_Disk| { &mut m.space_used_percent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry_Disk>(
                "Telemetry.Disk",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry_Disk {
        static instance: ::protobuf::rt::LazyV2<Telemetry_Disk> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry_Disk::new)
    }
}

impl ::protobuf::Clear for Telemetry_Disk {
    fn clear(&mut self) {
        self.mount_point.clear();
        self.space_total = 0;
        self.space_used = 0;
        self.space_used_percent = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry_Disk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry_Disk {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftelemetry.proto\x12\0\"\xd1\x04\n\tTelemetry\x12\x0c\n\x02ts\x18\
    \x01\x20\x01(\x04B\0\x12&\n\x08load_avg\x18\x02\x20\x01(\x0b2\x12.Teleme\
    try.LoadAvgB\0\x12\x1d\n\x03cpu\x18\x03\x20\x01(\x0b2\x0e.Telemetry.CpuB\
    \0\x12#\n\x06memory\x18\x04\x20\x01(\x0b2\x11.Telemetry.MemoryB\0\x12\
    \x1f\n\x04swap\x18\x05\x20\x01(\x0b2\x0f.Telemetry.SwapB\0\x12\x1f\n\x04\
    disk\x18\x06\x20\x03(\x0b2\x0f.Telemetry.DiskB\0\x1a=\n\x07LoadAvg\x12\r\
    \n\x03one\x18\x01\x20\x01(\x01B\0\x12\x0e\n\x04five\x18\x02\x20\x01(\x01\
    B\0\x12\x11\n\x07fifteen\x18\x03\x20\x01(\x01B\0:\0\x1a/\n\x03Cpu\x12\
    \x0f\n\x05usage\x18\x01\x20\x01(\x02B\0\x12\x15\n\x0btemperature\x18\x02\
    \x20\x01(\x02B\0:\0\x1aX\n\x06Memory\x12\x16\n\x0cmemory_total\x18\x01\
    \x20\x01(\x04B\0\x12\x15\n\x0bmemory_used\x18\x02\x20\x01(\x04B\0\x12\
    \x1d\n\x13memory_used_percent\x18\x03\x20\x01(\x02B\0:\0\x1aP\n\x04Swap\
    \x12\x14\n\nswap_total\x18\x01\x20\x01(\x04B\0\x12\x13\n\tswap_used\x18\
    \x02\x20\x01(\x04B\0\x12\x1b\n\x11swap_used_percent\x18\x03\x20\x01(\x02\
    B\0:\0\x1aj\n\x04Disk\x12\x15\n\x0bmount_point\x18\x01\x20\x01(\tB\0\x12\
    \x15\n\x0bspace_total\x18\x02\x20\x01(\x04B\0\x12\x14\n\nspace_used\x18\
    \x03\x20\x01(\x04B\0\x12\x1c\n\x12space_used_percent\x18\x04\x20\x01(\
    \x02B\0:\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
